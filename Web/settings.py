"""
Django settings for Web project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dc_zqnyh)_nne0_*8jq&*8q1nyk)d+_fk%cwze0+6mgfjg4w2!'

# SECURITY WARNING: don't run with debug turned on in production!
#调试模式，项目部署上线，应设置为False，否则会泄漏项目相关信息
DEBUG = True
ALLOWED_HOSTS = []
#域名访问权限，debug为True且HOSTS为空列表时，
# 项目只允许以localhost或127.0.0.1在浏览器上访问
#当debug为False时，HOSTS为必填项，否则程序无法启动，
# 若运行所有域名访问，列表可设置为'*"
#上线模式
# DEBUG = False
# ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 添加创建的应用
    'base',
    'index',
    'feedback',
    'meeting',
    # 添加Django CKEditor
    'ckeditor',
    'ckeditor_uploader',
    'chat',  # 实现聊天项目应用
    # 添加Channels功能
    'channels',
    'literature',

]

# Channels的功能配置，Channels的功能依赖于Redis数据库
#routing.py中定义的application对象
ASGI_APPLICATION = 'Web.routing.application'#设置Django与Channels的连接方式
CHANNEL_LAYERS = {  # 设置Redis数据库的连接方式
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],
        },
    },
}

# 编辑器的配置信息
CKEDITOR_UPLOAD_PATH = "upload"  # 会议上传的文件所保存的文件夹，
# 该文件夹必须在媒体资源文件夹（media）的目录下
CKEDITOR_CONFIGS = {  # 设置编辑器的工具栏
    'default': {
        'toolbar': 'Full'
    }
}  # 设置上传功能是否限制为图片文件，默认情况下支持任何文件上传
CKEDITOR_ALLOW_NONIMAGE_FILES = False
# 设置是否允许上传的文件显示在浏览器上
CKEDITOR_BROWSE_SHOW_DIRS = True

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # 内置的安全机制，保护用户与网站的通信安全
    # 创建项目时，默认启用Session功能，每个用户的Session通过中间件接收和调度处理
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 添加中间件LocaleMiddleware,使得Django内置的功能支持中文显示
    'django.middleware.locale.LocaleMiddleware',  # 国际化和本地化功能
    'django.middleware.common.CommonMiddleware',  # 处理请求信息，规范化请求内容
    # 开启CSRF防护功能，防护只适用于POST请求，不防护GET请求
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # 开启内置的用户认证系统
    'django.contrib.messages.middleware.MessageMiddleware',  # 开启内置的信息提示功能
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # 防止恶意程序单击劫持
]

ROOT_URLCONF = 'Web.urls'

TEMPLATES = [
    {
        # 定义模板引擎，识别模板里的变量和指令
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 设置模板所在路径，即Django查找模板的位置
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 将根目录的templates模板文件夹添加
        # 是否在app里查找模板
        'APP_DIRS': True,
        # 用于填充在RequestContext的上下文（模板里面的变量和指令）
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Web.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

#数据库配置信息
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'
# 国际化和本地化
USE_I18N = True

USE_L10N = True

USE_TZ = False

# Django内置用户模型User改为项目应用base的自定义模型User
AUTH_USER_MODEL = 'base.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 在debug=True下只能识别app目录下的static文件夹
# 设置静态资源的路由地址
STATIC_URL = '/static/'
# 设置根目录的静态资源文件夹publicStatic
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'publicStatic'), ]
# 当Django为调试模式(DEBUG=True)，项目运行时将读取publicStatic文件夹的静态资源
# 当Django为上线模式(DEBUG=False)，项目运行时将读取static文件夹的静态资源
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 设置媒体资源的保存路径
MEDIA_URL = "/media/"
# 获取media文件夹的完整路径信息
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# 发送邮件实现密码找回
# 邮件配置信息
EMAIL_USE_SSL = True
# 邮件服务器，如果是 163就改成 smtp.163.com
EMAIL_HOST = 'smtp.qq.com'  # 接收验证码的QQ邮箱（445593280@qq.com）
# 邮件服务器端口，若使用SMTP服务，则端口应为465或587
EMAIL_PORT = 465
# 发送验证码的邮件账号，需已开启POP3/SMTP服务
EMAIL_HOST_USER = '522441969@qq.com'
# SMTP服务密码
EMAIL_HOST_PASSWORD = 'cxbfxyqrsdubbhgg'
# 开启POP3/SMTP服务后，返回的客户端授权密码
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER  # 默认发送邮件的账号
